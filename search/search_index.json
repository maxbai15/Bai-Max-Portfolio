{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#about-me","title":"About Me","text":"<p>I am Max Bai, a Senior student in the Honors Engineering/Computer Science program at Charlotte Latin. I am especially interested in math and icomputer science. Outside of class, I participate in soccer. My favorite hobbies are skiing and sleeping. In the future, I hope to continue studying computer science and mathematics in the future.</p>"},{"location":"#portfolio-navigation","title":"Portfolio Navigation","text":"<ul> <li>AP Computer Science A</li> <li>AP Computer Science Principles</li> <li>AP Networking</li> <li>Game Design</li> <li>Engineering Projects</li> <li>Extracurriculars</li> </ul>"},{"location":"about/","title":"About Me","text":"<p>I am a student at Charlotte Latin School, interested in networking, engineering, and technology.</p>"},{"location":"contact/","title":"Welcome to MkDocs","text":"<p>For full documentation visit mkdocs.org.</p>"},{"location":"contact/#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"contact/#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre>"},{"location":"classes/ap-networking/202509CLI/","title":"Command Line Interface (CLI)","text":""},{"location":"classes/ap-networking/202509CLI/#1-project-overview","title":"1. Project Overview","text":"<p>Problem Statement: Learn to navigate and manage a Linux system through the command line, practicing foundational Ubuntu commands while applying them in structured challenges.  </p> <p>Objectives: - Navigate the file system with commands like <code>pwd</code>, <code>cd</code>, and <code>ls</code>. - Manage files and directories using <code>mkdir</code>, <code>touch</code>, <code>cp</code>, <code>rm</code>. - Apply advanced commands for hidden files, editing, and system checks. - Complete Map the Maze I &amp; II activities and the House activity to demonstrate mastery.  </p> <p>Success Criteria: - Correct use of CLI commands to solve navigation and file management tasks. - Completion of activities with correct sequences. - Evidence of working tests (screenshots, logs, or tables). - Clear explanation of what was learned and real-world relevance.  </p>"},{"location":"classes/ap-networking/202509CLI/#2-design-planning-map-the-maze-i-ubuntu-tutorial","title":"2. Design &amp; Planning \u2013 Map the Maze I &amp; Ubuntu Tutorial","text":"<p>The design and planning stage focused on building a foundation for working in the Ubuntu command line. I began with Map the Maze I, which introduced me to the most basic commands like <code>pwd</code> (to check my current directory), <code>cd</code> (to move into another directory), and <code>ls</code> (to see the contents of a folder). The activity acted like a puzzle that forced me to think step-by-step about where I was and where I needed to go. This helped me understand that the CLI requires precision: a mistyped command or wrong directory name will not work.  </p> <p>At the same time, I followed the Ubuntu tutorial, which gave me a broader context for why these commands matter. It covered file creation (<code>mkdir</code>, <code>touch</code>), file editing (<code>nano</code>), and system commands like <code>chmod</code> (to change permissions) or <code>top</code> (to monitor running processes). This tutorial complemented Map the Maze I by showing real-world uses of the same basic skills I was practicing.  </p> <p>Together, Map the Maze I and the tutorial gave me the tools I needed for the next phases of the project. They also served as my \u201cplan,\u201d since I now had a clear set of commands I could apply to more complex tasks.  </p> Command Purpose Example <code>pwd</code> Show current directory <code>/home/student</code> <code>ls</code> List files and folders <code>ls -a</code> <code>cd</code> Change directory <code>cd Documents</code> <code>mkdir</code> Create directory <code>mkdir Maze</code> <code>touch</code> Create file <code>touch clue.txt</code> <code>nano</code> Edit a file <code>nano clue.txt</code> <p> </p>"},{"location":"classes/ap-networking/202509CLI/#3-technical-development-map-the-maze-ii","title":"3. Technical Development \u2013 Map the Maze II","text":"<p>In the technical development stage, I worked through Map the Maze II, which expanded on the basics from Maze I. This activity required me not just to move around directories, but also to create, edit, copy, and discover hidden files. For example, I used <code>touch</code> to create files, <code>nano</code> to edit their contents, and <code>cp</code> to duplicate them. One of the biggest lessons was using <code>ls -a</code> to reveal hidden files, which showed me that sometimes information is present but not visible without the right command.  </p> <p>This activity also gave me practice in versioning: each step built on the last. At first, I simply navigated and confirmed my location. Then I began creating and editing files. Finally, I put it all together by managing multiple files and finding hidden clues.  </p> Task Command(s) Used Notes Navigate directories <code>cd</code>, <code>pwd</code> Used constantly to stay oriented Create folder <code>mkdir maze2</code> Built a workspace Create file <code>touch secret.txt</code> Added clue file Edit file <code>nano secret.txt</code> Inserted instructions Copy file <code>cp secret.txt copy.txt</code> Practiced duplication Show hidden files <code>ls -a</code> Discovered hidden messages <p> </p> <p>By the end of Map the Maze II, I could confidently use multiple commands together to solve more complex tasks.  </p>"},{"location":"classes/ap-networking/202509CLI/#4-testing-evaluation-house-activity","title":"4. Testing &amp; Evaluation \u2013 House Activity","text":"<p>The testing and evaluation stage was the House Activity, which acted as the ultimate test of whether I could apply all the commands I had learned. Instead of being a linear maze, the House required me to move through rooms, inspect items, and complete tasks. This tested not only my command knowledge but also my ability to adapt and think logically.  </p> <p>For example, I started in the \u201challway\u201d and used <code>pwd</code> to confirm my location. I used <code>cd</code> to enter specific rooms like the Kitchen and <code>ls</code> to check what was inside. Some rooms required me to clean up files, so I practiced deleting with <code>rm</code>. I also created notes using <code>nano</code> and found hidden items by remembering to use <code>ls -a</code>.  </p> Step Action Command(s) Evaluation Locate self Check starting directory <code>pwd</code> Correct path displayed Move to room Enter Kitchen <code>cd Kitchen</code> Successful navigation Inspect room List files <code>ls</code> Saw visible items Clean up Delete file <code>rm trash.txt</code> Removed unnecessary file Create note Add message <code>nano note.txt</code> Wrote instructions Reveal hidden Show hidden items <code>ls -a</code> Found secret files <p> </p> <p>Bugs &amp; Fixes: - I initially forgot to use <code>ls -a</code> and missed hidden files. This was fixed after I retraced my steps. - I once used the wrong capitalization in a directory name (<code>cd kitchen</code> instead of <code>cd Kitchen</code>), which didn\u2019t work until I corrected it. This taught me that Linux is case-sensitive. - Accidentally removed the wrong file using <code>rm</code>, which reinforced the importance of double-checking filenames.  </p> <p>This activity confirmed that I could take the structured skills from Maze I and II and apply them in an open-ended environment.  </p>"},{"location":"classes/ap-networking/202509component-cards/","title":"Hardware &amp; Software Components","text":""},{"location":"classes/ap-networking/202509component-cards/#1-project-overview","title":"1. Project Overview","text":"<p>Problem Statement: Understand the main hardware and software components of a computer, their purposes, and how they work together.</p> <p>Objectives: - Identify main hardware components (CPU, RAM, GPU, etc.) - Describe the role of each software layer (Firmware, Drivers, OS, Libraries, Applications) - Explain how hardware and software interact to perform tasks - Map the data flow from input to storage  </p> <p>Success Criteria: - Correctly understand hardware components  - Correctly understand software layers/component - Create flow charts describing proccesses</p>"},{"location":"classes/ap-networking/202509component-cards/#2-design-planning","title":"2. Design &amp; Planning","text":"<p>Hardware Activities: - Arrange hardware cards to show the data path when typing a sentence and saving it - Materials: CPU, RAM, Storage, GPU, Motherboard, PSU, NIC, Cooling System, I/O Devices - Include a photo of your card arrangement</p> <p>Software Activities: - Arrange software strips to show the process for downloading a file or printing a document - Sequence: Application -&gt; Libraries/Runtime -&gt; OS -&gt; Device Drivers -&gt; Firmware - Include a photo of your arranged strips</p> <p>Build-A-PC Challenge: - Choose a purpose (gaming, video editing, etc.) - Select upgrades within a $1,000 budget - Fill out chart: Component, Upgrade, Why it matters  </p>"},{"location":"classes/ap-networking/202509component-cards/#3-technical-development","title":"3. Technical Development","text":"<p>Hardware: - CPU, RAM, Storage, GPU, Motherboard, PSU, NIC, Cooling System, I/O Devices - Version history: initial arrangement -&gt; comparing arrangements with other people</p> <p>Software: - Application, Libraries/Runtime, OS, Device Drivers, Firmware - Flow of data for printing or downloading tasks - Version History: our flow chart that we think would be the right sequence</p> <p>Build-A-PC Challenge: Decision-making Considerations: - Gaming: Prioritize high-performance CPU and GPU to handle graphics and fast processing. - Video/Photo Editing: Prioritize more RAM and faster storage to handle large files efficiently. - General Use: Mid-range components are usually sufficient, leaving room in the budget for extra cooling or networking upgrades. - Different types of components (CPU, GPU, RAM) have trade-offs between cost, performance, and purpose. Choosing depends on what tasks you plan to do most often. - This challenge gives you a variety of different componenets ranging from high end to low end for every component. This means you have to choose wisely when choosing which parts you want to have high end components vs low end components.</p>"},{"location":"classes/ap-networking/202509component-cards/#4-testing-evaluation","title":"4. Testing &amp; Evaluation","text":"<p>Hardware: - Test: Type a sentence and save file - Sequence: Had to think through the hardware component used for typing a sentence and saving them. Thought about it starting at the power all the way to the I/O Devices -  - Bugs: When sharing different people's boards with the entire class, everyone discovered different parts where they could have improved. In mine the motherboard wasn't  connecting directly to components like the GPU and SSD.</p> <p>Software: - Test: Download and print document using arranged software layers - Sequence for software layers only:  Application \u2014&gt; libraries/runtimes \u2014&gt; OS \u2014&gt; Device Drivers \u2014&gt; Firmware - Sequence for software and hardware layers: Application \u2014&gt; libraries/runtimes \u2014&gt; OS \u2014&gt; Device Drivers \u2014&gt; Firmware \u2014&gt; RAM \u2014&gt; CPU \u2014&gt; Storage \u2014&gt; I/O Device</p> <p>Build-A-PC Challenge: - Test: Built PC for gaming purpose - Components Chosen:   - CPU: Intel Core i5 6-core ($150)   - RAM: 16 GB DDR4 ($150)   - Storage: 1 TB SSD ($250)   - GPU: High-end graphics card ($400)   - Cooling: Enhanced air cooling ($100)   - NIC and other upgrades as needed   - Reasoning: Gaming requires fast CPU and high-performance GPU to handle games smoothly. 16 GB RAM and 1 TB SSD provide enough speed and storage for games. Cooling was selected to prevent overheating during extended gaming sessions. Also I chose the top end GPU over the CPU since GPU's are usually more important for smoother gaming experiences.</p>"},{"location":"classes/ap-networking/202509component-cards/#5-reflection-analysis","title":"5. Reflection &amp; Analysis","text":"<p>I learned how hardware and software work together to perform computing tasks. The CPU acts as the brain, RAM temporarily stores data, and the GPU accelerates display and computation. Software layers allow applications to communicate with hardware through drivers and the OS. The Build-A-PC challenge helped me learn to make trade-offs to optimize for gaming, balancing cost, and performance. These lessons mirror real-world computing and network system design. By learning the basic components, we can understand how pcs function and work. If there every was a problem or a component needed to be upgraded, we could determine which one. Some next steps could include exploring cloud storage and exploring how the cli works.</p>"}]}