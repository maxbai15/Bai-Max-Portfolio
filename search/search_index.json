{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Home About Me I am Max Bai , a Senior student in the Honors Engineering/Computer Science program at Charlotte Latin. I am especially interested in math and icomputer science. Outside of class, I participate in soccer. My favorite hobbies are skiing and sleeping. In the future, I hope to continue studying computer science and mathematics in the future. Portfolio Navigation AP Computer Science A AP Computer Science Principles AP Networking Game Design Engineering Projects Extracurriculars","title":"Home"},{"location":"#home","text":"","title":"Home"},{"location":"#about-me","text":"I am Max Bai , a Senior student in the Honors Engineering/Computer Science program at Charlotte Latin. I am especially interested in math and icomputer science. Outside of class, I participate in soccer. My favorite hobbies are skiing and sleeping. In the future, I hope to continue studying computer science and mathematics in the future.","title":"About Me"},{"location":"#portfolio-navigation","text":"AP Computer Science A AP Computer Science Principles AP Networking Game Design Engineering Projects Extracurriculars","title":"Portfolio Navigation"},{"location":"about/","text":"About Me I am a student at Charlotte Latin School, interested in networking, engineering, and technology.","title":"About me"},{"location":"about/#about-me","text":"I am a student at Charlotte Latin School, interested in networking, engineering, and technology.","title":"About Me"},{"location":"contact/","text":"Welcome to MkDocs For full documentation visit mkdocs.org . Commands mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. Project layout mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Welcome to MkDocs"},{"location":"contact/#welcome-to-mkdocs","text":"For full documentation visit mkdocs.org .","title":"Welcome to MkDocs"},{"location":"contact/#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit.","title":"Commands"},{"location":"contact/#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"classes/ap-networking/202509CLI/","text":"Command Line Interface (CLI) 1. Project Overview Problem Statement: Learn to navigate and manage a Linux system through the command line, practicing foundational Ubuntu commands while applying them in structured challenges. Objectives: - Navigate file systems with commands like pwd , cd , and ls . - Manage files and directories using mkdir , touch , cp , rm . - Apply advanced commands for hidden files, editing, and system checks. - Complete Map the Maze I & II activities and the House activity to demonstrate mastery. Success Criteria: - Correct use of CLI commands to solve navigation and file management tasks. - Completion of activities with correct sequences. - Evidence of working tests (screenshots, logs, or tables). 2. Design & Planning \u2013 Map the Maze I & Ubuntu Tutorial The design and planning stage focused on building a foundation for understanding the file tree system, working in the Ubuntu command line, and learning the necessary skills to navigate through the command line. Starting with Map the Maze I , it introduced me first to the different terminology for understanding file paths and how they work, such as what a parent directory is vs a root directory. After that, Map the Maze I taught me about many basic commands like pwd (to check my current directory), cd (to move into another directory), and ls (to see the contents of a folder). This helped me understand that the CLI requires precision: a mistyped command or wrong directory name will not work. At the same time, I followed the Ubuntu tutorial , which gave me a broader context for why these commands matter. It covered file creation ( mkdir , touch ) and file editing ( nano ). This tutorial complemented Map the Maze I by showing real-world uses of the same basic skills I was practicing. Together, Map the Maze I and the tutorial gave me the tools I needed for the next phases of the project. They also served as my \u201cplan,\u201d since I now had a clear set of commands I could apply to more complex tasks. File Tree System Terminology Term Definition / Example Root Directory (/ or C:) Very top of the file system tree. On Mac/Linux, it\u2019s represented as a single slash / . On Windows, it usually starts with a drive letter, such as C:\\ . All folders and files branch downward from this starting point, like branches from the trunk of a tree. Example: On Windows, C:\\Users\\John\\Documents\\essay.docx begins at C:\\ (the root). On Mac, /Users/John/Documents/essay.docx begins at / (the root). Folder (Directory) A folder, also called a directory, is a container used to organize files and other folders. Helps organize related files. Example: A folder named Documents might contain files like essay.docx and budget.xlsx and a subfolder named School . File A file is a single digital object that holds data, such as text, images, video, or code. Example: notes.txt is a text file, photo.jpg is an image file. Path A path is the \u201caddress\u201d of a file or folder, showing its location inside the file system. Path written as a sequence of folder names separated by slashes ( / ) on Mac/Linux or backslashes ( \\ ) on Windows. Example: Mac/Linux: /Users/John/Documents/essay.docx ; Windows: C:\\Users\\John\\Documents\\essay.docx . Absolute Path Absolute path gives the complete address of a file, starting at the root directory. Example: Mac/Linux: /Users/John/Documents/essay.docx ; Windows: C:\\Users\\John\\Documents\\essay.docx . Relative Path A relative path shows the location of a file or folder starting from your current working directory (where you are right now). Example: If your current folder is /Users/John , the relative path to essay.docx in Documents is Documents/essay.docx . CLI Commands Command Purpose Example pwd Show current directory /home/student ls List files and folders ls -a cd Change directory cd Documents mkdir Create directory mkdir Maze touch Create file touch clue.txt nano Edit a file nano clue.txt Example Text Version of My File System Tree I Drew: Network Troubleshooting Term Definition Wi-Fi / Ethernet Signal carrier - ways your computer connect to internet IP address Internet Protocol - Identifiable address given to a device Default gateway (router) Device to connect local network to the internet DNS (Domain Name System) Like the internet\u2019s \u201cphonebook\u201d translating user friendly domain names( like google.com) into ip addresses Ping Method used to test connectivity between two devices (Ex. ping -c 4 8.8.8.8) NAT / Shared networking (UTM) Network Function to pool all devices on a private network into one public IP Address before sending to external networks Bridged networking (UTM) VM acts like a completely separate computer 3. Technical Development \u2013 Map the Maze II In the technical development stage , I worked through Map the Maze II , which expanded on the basics from Maze I. This activity required me not just to move around directories, but also to create, edit, copy, and discover hidden files. For example, I used touch to create files, nano to edit their contents, and cp to duplicate them. One of the biggest lessons was using ls -a to reveal hidden files, which showed me that sometimes information is present but not visible without the right command. This activity also gave me practice in versioning: each step built on the last. At first, I simply navigated and confirmed my location. Then I began creating and editing files. Finally, I put it all together by managing multiple files and finding/creating my own hidden clues. Some Commands Used and Why Task Command(s) Used Notes Navigate directories cd , pwd Used constantly to stay oriented Create folder mkdir MazeGame Built a workspace Create file touch clue1.txt Added clue file Edit file nano clue1.txt Inserted instructions Mount PC sudo mount -t davfs http://127.0.0.1:9843/ ~/hostshare/ Allow sharing file from Mac to virtual Machine Show hidden files ls -a Discovered hidden files in Maze Game Editing clue1 and reading what was inside: Sharing Clue1 onto hostshare so both mac and ubuntu can access: By the end of Map the Maze II, I could confidently use multiple commands together to solve more complex tasks. 4. Testing & Evaluation \u2013 House Activity The testing and evaluation stage was the House Activity , which acted as the ultimate test of whether I could apply all the commands I had learned. Instead of being a linear maze, the House required me to move through rooms, inspect items, and complete tasks. This activity was a file system directory simulated as a house that I was required to navigate through. This tested not only my command knowledge but also my ability to adapt and think logically to navigate throught the different directories and find out information and even remove/edit information. For example, starting in the \u201challway\u201d, you would have to use pwd to confirm your location, then use cd to enter specific rooms like the Kitchen and ls to check what was inside. Some rooms required cleaning up files and even discovering trash(hidden files in the garage directory), so you had to be sharp and disocver hiddden files and delete with rm. Also, some tasks required creating notes using nano and leaving messages for the owner. Some Commands Used and Why Step Action Command(s) Evaluation Locate self Check starting directory pwd Correct path displayed Move to room Enter Kitchen cd Kitchen Successful navigation to different areas of the house Inspect room List files ls Saw visible items like food (files) Clean up Delete file rm trash.txt Removed unnecessary files like garbage Create note Add message nano note.txt Left messages for the house owner Reveal hidden Show hidden items ls -a Found secret files (hidden garbage in the garage) Navigating through the kitchen directory, taking out fruit and getting rid of rotten fruit: Navigating through the garage directory, finding hidden trash and removing it: Bugs & Fixes: - Initially forgot to use ls -a and missed hidden files; fixed after retracing steps. - Used wrong capitalization ( cd kitchen instead of cd Kitchen ); corrected to work. This activity served as the final test combining skills from the Ubuntu tutorial and both Map the Maze parts. 5. Reflection Completing the CLI assignments gave me a deeper understanding of how to navigate the command line and file tree system. Through Map the Maze I & II and the House Activity, I learned that precision and attention to detail are critical: even small mistakes, like a wrong directory name or missed hidden file, can prevent progress. I also recognized the importance of planning and iteration. By breaking each activity into smaller steps, testing commands, and observing their effects, I troubleshoot and find hidden files or find the files I needed to change. The project reinforced the value of combining foundational skills with real-world application, such as mounting shared directories or managing multiple files simultaneously. Finally, this project helped to improve my problem-solving skills and adaptability. Navigating the simulated house and discovering hidden files required logical thinking and , making sure the right files were removed/editied and hidden files were found. Overall, I now feel more competent in using the Linux command line, and I understand how these skills will support future technical challenges.","title":"Command Line Interface"},{"location":"classes/ap-networking/202509CLI/#command-line-interface-cli","text":"","title":"Command Line Interface (CLI)"},{"location":"classes/ap-networking/202509CLI/#1-project-overview","text":"Problem Statement: Learn to navigate and manage a Linux system through the command line, practicing foundational Ubuntu commands while applying them in structured challenges. Objectives: - Navigate file systems with commands like pwd , cd , and ls . - Manage files and directories using mkdir , touch , cp , rm . - Apply advanced commands for hidden files, editing, and system checks. - Complete Map the Maze I & II activities and the House activity to demonstrate mastery. Success Criteria: - Correct use of CLI commands to solve navigation and file management tasks. - Completion of activities with correct sequences. - Evidence of working tests (screenshots, logs, or tables).","title":"1. Project Overview"},{"location":"classes/ap-networking/202509CLI/#2-design-planning-map-the-maze-i-ubuntu-tutorial","text":"The design and planning stage focused on building a foundation for understanding the file tree system, working in the Ubuntu command line, and learning the necessary skills to navigate through the command line. Starting with Map the Maze I , it introduced me first to the different terminology for understanding file paths and how they work, such as what a parent directory is vs a root directory. After that, Map the Maze I taught me about many basic commands like pwd (to check my current directory), cd (to move into another directory), and ls (to see the contents of a folder). This helped me understand that the CLI requires precision: a mistyped command or wrong directory name will not work. At the same time, I followed the Ubuntu tutorial , which gave me a broader context for why these commands matter. It covered file creation ( mkdir , touch ) and file editing ( nano ). This tutorial complemented Map the Maze I by showing real-world uses of the same basic skills I was practicing. Together, Map the Maze I and the tutorial gave me the tools I needed for the next phases of the project. They also served as my \u201cplan,\u201d since I now had a clear set of commands I could apply to more complex tasks.","title":"2. Design &amp; Planning \u2013 Map the Maze I &amp; Ubuntu Tutorial"},{"location":"classes/ap-networking/202509CLI/#file-tree-system-terminology","text":"Term Definition / Example Root Directory (/ or C:) Very top of the file system tree. On Mac/Linux, it\u2019s represented as a single slash / . On Windows, it usually starts with a drive letter, such as C:\\ . All folders and files branch downward from this starting point, like branches from the trunk of a tree. Example: On Windows, C:\\Users\\John\\Documents\\essay.docx begins at C:\\ (the root). On Mac, /Users/John/Documents/essay.docx begins at / (the root). Folder (Directory) A folder, also called a directory, is a container used to organize files and other folders. Helps organize related files. Example: A folder named Documents might contain files like essay.docx and budget.xlsx and a subfolder named School . File A file is a single digital object that holds data, such as text, images, video, or code. Example: notes.txt is a text file, photo.jpg is an image file. Path A path is the \u201caddress\u201d of a file or folder, showing its location inside the file system. Path written as a sequence of folder names separated by slashes ( / ) on Mac/Linux or backslashes ( \\ ) on Windows. Example: Mac/Linux: /Users/John/Documents/essay.docx ; Windows: C:\\Users\\John\\Documents\\essay.docx . Absolute Path Absolute path gives the complete address of a file, starting at the root directory. Example: Mac/Linux: /Users/John/Documents/essay.docx ; Windows: C:\\Users\\John\\Documents\\essay.docx . Relative Path A relative path shows the location of a file or folder starting from your current working directory (where you are right now). Example: If your current folder is /Users/John , the relative path to essay.docx in Documents is Documents/essay.docx .","title":"File Tree System Terminology"},{"location":"classes/ap-networking/202509CLI/#cli-commands","text":"Command Purpose Example pwd Show current directory /home/student ls List files and folders ls -a cd Change directory cd Documents mkdir Create directory mkdir Maze touch Create file touch clue.txt nano Edit a file nano clue.txt Example Text Version of My File System Tree I Drew:","title":"CLI Commands"},{"location":"classes/ap-networking/202509CLI/#network-troubleshooting","text":"Term Definition Wi-Fi / Ethernet Signal carrier - ways your computer connect to internet IP address Internet Protocol - Identifiable address given to a device Default gateway (router) Device to connect local network to the internet DNS (Domain Name System) Like the internet\u2019s \u201cphonebook\u201d translating user friendly domain names( like google.com) into ip addresses Ping Method used to test connectivity between two devices (Ex. ping -c 4 8.8.8.8) NAT / Shared networking (UTM) Network Function to pool all devices on a private network into one public IP Address before sending to external networks Bridged networking (UTM) VM acts like a completely separate computer","title":"Network Troubleshooting"},{"location":"classes/ap-networking/202509CLI/#3-technical-development-map-the-maze-ii","text":"In the technical development stage , I worked through Map the Maze II , which expanded on the basics from Maze I. This activity required me not just to move around directories, but also to create, edit, copy, and discover hidden files. For example, I used touch to create files, nano to edit their contents, and cp to duplicate them. One of the biggest lessons was using ls -a to reveal hidden files, which showed me that sometimes information is present but not visible without the right command. This activity also gave me practice in versioning: each step built on the last. At first, I simply navigated and confirmed my location. Then I began creating and editing files. Finally, I put it all together by managing multiple files and finding/creating my own hidden clues.","title":"3. Technical Development \u2013 Map the Maze II"},{"location":"classes/ap-networking/202509CLI/#some-commands-used-and-why","text":"Task Command(s) Used Notes Navigate directories cd , pwd Used constantly to stay oriented Create folder mkdir MazeGame Built a workspace Create file touch clue1.txt Added clue file Edit file nano clue1.txt Inserted instructions Mount PC sudo mount -t davfs http://127.0.0.1:9843/ ~/hostshare/ Allow sharing file from Mac to virtual Machine Show hidden files ls -a Discovered hidden files in Maze Game Editing clue1 and reading what was inside: Sharing Clue1 onto hostshare so both mac and ubuntu can access: By the end of Map the Maze II, I could confidently use multiple commands together to solve more complex tasks.","title":"Some Commands Used and Why"},{"location":"classes/ap-networking/202509CLI/#4-testing-evaluation-house-activity","text":"The testing and evaluation stage was the House Activity , which acted as the ultimate test of whether I could apply all the commands I had learned. Instead of being a linear maze, the House required me to move through rooms, inspect items, and complete tasks. This activity was a file system directory simulated as a house that I was required to navigate through. This tested not only my command knowledge but also my ability to adapt and think logically to navigate throught the different directories and find out information and even remove/edit information. For example, starting in the \u201challway\u201d, you would have to use pwd to confirm your location, then use cd to enter specific rooms like the Kitchen and ls to check what was inside. Some rooms required cleaning up files and even discovering trash(hidden files in the garage directory), so you had to be sharp and disocver hiddden files and delete with rm. Also, some tasks required creating notes using nano and leaving messages for the owner.","title":"4. Testing &amp; Evaluation \u2013 House Activity"},{"location":"classes/ap-networking/202509CLI/#some-commands-used-and-why_1","text":"Step Action Command(s) Evaluation Locate self Check starting directory pwd Correct path displayed Move to room Enter Kitchen cd Kitchen Successful navigation to different areas of the house Inspect room List files ls Saw visible items like food (files) Clean up Delete file rm trash.txt Removed unnecessary files like garbage Create note Add message nano note.txt Left messages for the house owner Reveal hidden Show hidden items ls -a Found secret files (hidden garbage in the garage) Navigating through the kitchen directory, taking out fruit and getting rid of rotten fruit: Navigating through the garage directory, finding hidden trash and removing it: Bugs & Fixes: - Initially forgot to use ls -a and missed hidden files; fixed after retracing steps. - Used wrong capitalization ( cd kitchen instead of cd Kitchen ); corrected to work. This activity served as the final test combining skills from the Ubuntu tutorial and both Map the Maze parts.","title":"Some Commands Used and Why"},{"location":"classes/ap-networking/202509CLI/#5-reflection","text":"Completing the CLI assignments gave me a deeper understanding of how to navigate the command line and file tree system. Through Map the Maze I & II and the House Activity, I learned that precision and attention to detail are critical: even small mistakes, like a wrong directory name or missed hidden file, can prevent progress. I also recognized the importance of planning and iteration. By breaking each activity into smaller steps, testing commands, and observing their effects, I troubleshoot and find hidden files or find the files I needed to change. The project reinforced the value of combining foundational skills with real-world application, such as mounting shared directories or managing multiple files simultaneously. Finally, this project helped to improve my problem-solving skills and adaptability. Navigating the simulated house and discovering hidden files required logical thinking and , making sure the right files were removed/editied and hidden files were found. Overall, I now feel more competent in using the Linux command line, and I understand how these skills will support future technical challenges.","title":"5. Reflection"},{"location":"classes/ap-networking/202509component-cards/","text":"Hardware & Software Components 1. Project Overview Problem Statement: Understand the main hardware and software components of a computer, their purposes, and how they work together. Objectives: - Identify main hardware components (CPU, RAM, GPU, etc.) - Describe the role of each software layer (Firmware, Drivers, OS, Libraries, Applications) - Explain how hardware and software interact to perform tasks - Map the data flow from input to storage Success Criteria: - Correctly understand hardware components - Correctly understand software layers/component - Create flow charts describing proccesses 2. Design & Planning Silent Signaling - we were given a tab with a blue side and a white side - we had to answer questions using only the tab, no gesturing Component Song - We had to create a song about hardware component - Could use ai to do the lyrics and song Hardware Activities: - Arrange hardware cards to show the data path when typing a sentence and saving it - Materials: CPU, RAM, Storage, GPU, Motherboard, PSU, NIC, Cooling System, I/O Devices - Include a photo of your card arrangement Software Activities: - Arrange software strips to show the process for downloading a file or printing a document - Sequence: Application -> Libraries/Runtime -> OS -> Device Drivers -> Firmware - Include a photo of your arranged strips Build-A-PC Challenge: - Choose a purpose (gaming, video editing, etc.) - Select upgrades within a $1,000 budget - Fill out chart: Component, Upgrade, Why it matters 3. Technical Development Hardware: - CPU, RAM, Storage, GPU, Motherboard, PSU, NIC, Cooling System, I/O Devices - Version history: initial arrangement -> comparing arrangements with other people Software: - Application, Libraries/Runtime, OS, Device Drivers, Firmware - Flow of data for printing or downloading tasks - Version History: our flow chart that we think would be the right sequence Build-A-PC Challenge: Decision-making Considerations: - Gaming: Prioritize high-performance CPU and GPU to handle graphics and fast processing. - Video/Photo Editing: Prioritize more RAM and faster storage to handle large files efficiently. - General Use: Mid-range components are usually sufficient, leaving room in the budget for extra cooling or networking upgrades. - Different types of components (CPU, GPU, RAM) have trade-offs between cost, performance, and purpose. Choosing depends on what tasks you plan to do most often. - This challenge gives you a variety of different componenets ranging from high end to low end for every component. This means you have to choose wisely when choosing which parts you want to have high end components vs low end components. 4. Testing & Evaluation Silent Signaling For Silent Signaling I didn't do it completely right since I gestured by using tapping. I whould have done it better using binary, like white represent 0 and blue represent 1. The image below shows a better solution - silent signaling image Component Song - Link to song: - link to lyrics Hardware: - Test: Type a sentence and save file - Sequence: Had to think through the hardware component used for typing a sentence and saving them. Thought about it starting at the power all the way to the I/O Devices - - Bugs: When sharing different people's boards with the entire class, everyone discovered different parts where they could have improved. In mine the motherboard wasn't connecting directly to components like the GPU and SSD. - Best voted classroom flowchart: Software: - Test: Download and print document using arranged software layers - Sequence for software layers only: Application \u2014> libraries/runtimes \u2014> OS \u2014> Device Drivers \u2014> Firmware - Sequence for software and hardware layers: Application \u2014> libraries/runtimes \u2014> OS \u2014> Device Drivers \u2014> Firmware \u2014> RAM \u2014> CPU \u2014> Storage \u2014> I/O Device - Build-A-PC Challenge: - Test: Built PC for gaming purpose - Components Chosen: - CPU: Intel Core i5 6-core ($150) - RAM: 16 GB DDR4 ($150) - Storage: 1 TB SSD ($250) - GPU: High-end graphics card ($400) - Cooling: Enhanced air cooling ($100) - NIC and other upgrades as needed - Reasoning: Gaming requires fast CPU and high-performance GPU to handle games smoothly. 16 GB RAM and 1 TB SSD provide enough speed and storage for games. Cooling was selected to prevent overheating during extended gaming sessions. Also I chose the top end GPU over the CPU since GPU's are usually more important for smoother gaming experiences. 5. Reflection & Analysis I learned how hardware and software work together to perform computing tasks. The CPU acts as the brain, RAM temporarily stores data, and the GPU accelerates display and computation. Software layers allow applications to communicate with hardware through drivers and the OS. The Build-A-PC challenge helped me learn to make trade-offs to optimize for gaming, balancing cost, and performance. These lessons mirror real-world computing and network system design. By learning the basic components, we can understand how pcs function and work. If there every was a problem or a component needed to be upgraded, we could determine which one. Some next steps could include exploring cloud storage and exploring how the cli works.","title":"Component Cards"},{"location":"classes/ap-networking/202509component-cards/#hardware-software-components","text":"","title":"Hardware &amp; Software Components"},{"location":"classes/ap-networking/202509component-cards/#1-project-overview","text":"Problem Statement: Understand the main hardware and software components of a computer, their purposes, and how they work together. Objectives: - Identify main hardware components (CPU, RAM, GPU, etc.) - Describe the role of each software layer (Firmware, Drivers, OS, Libraries, Applications) - Explain how hardware and software interact to perform tasks - Map the data flow from input to storage Success Criteria: - Correctly understand hardware components - Correctly understand software layers/component - Create flow charts describing proccesses","title":"1. Project Overview"},{"location":"classes/ap-networking/202509component-cards/#2-design-planning","text":"Silent Signaling - we were given a tab with a blue side and a white side - we had to answer questions using only the tab, no gesturing Component Song - We had to create a song about hardware component - Could use ai to do the lyrics and song Hardware Activities: - Arrange hardware cards to show the data path when typing a sentence and saving it - Materials: CPU, RAM, Storage, GPU, Motherboard, PSU, NIC, Cooling System, I/O Devices - Include a photo of your card arrangement Software Activities: - Arrange software strips to show the process for downloading a file or printing a document - Sequence: Application -> Libraries/Runtime -> OS -> Device Drivers -> Firmware - Include a photo of your arranged strips Build-A-PC Challenge: - Choose a purpose (gaming, video editing, etc.) - Select upgrades within a $1,000 budget - Fill out chart: Component, Upgrade, Why it matters","title":"2. Design &amp; Planning"},{"location":"classes/ap-networking/202509component-cards/#3-technical-development","text":"Hardware: - CPU, RAM, Storage, GPU, Motherboard, PSU, NIC, Cooling System, I/O Devices - Version history: initial arrangement -> comparing arrangements with other people Software: - Application, Libraries/Runtime, OS, Device Drivers, Firmware - Flow of data for printing or downloading tasks - Version History: our flow chart that we think would be the right sequence Build-A-PC Challenge: Decision-making Considerations: - Gaming: Prioritize high-performance CPU and GPU to handle graphics and fast processing. - Video/Photo Editing: Prioritize more RAM and faster storage to handle large files efficiently. - General Use: Mid-range components are usually sufficient, leaving room in the budget for extra cooling or networking upgrades. - Different types of components (CPU, GPU, RAM) have trade-offs between cost, performance, and purpose. Choosing depends on what tasks you plan to do most often. - This challenge gives you a variety of different componenets ranging from high end to low end for every component. This means you have to choose wisely when choosing which parts you want to have high end components vs low end components.","title":"3. Technical Development"},{"location":"classes/ap-networking/202509component-cards/#4-testing-evaluation","text":"Silent Signaling For Silent Signaling I didn't do it completely right since I gestured by using tapping. I whould have done it better using binary, like white represent 0 and blue represent 1. The image below shows a better solution - silent signaling image Component Song - Link to song: - link to lyrics Hardware: - Test: Type a sentence and save file - Sequence: Had to think through the hardware component used for typing a sentence and saving them. Thought about it starting at the power all the way to the I/O Devices - - Bugs: When sharing different people's boards with the entire class, everyone discovered different parts where they could have improved. In mine the motherboard wasn't connecting directly to components like the GPU and SSD. - Best voted classroom flowchart: Software: - Test: Download and print document using arranged software layers - Sequence for software layers only: Application \u2014> libraries/runtimes \u2014> OS \u2014> Device Drivers \u2014> Firmware - Sequence for software and hardware layers: Application \u2014> libraries/runtimes \u2014> OS \u2014> Device Drivers \u2014> Firmware \u2014> RAM \u2014> CPU \u2014> Storage \u2014> I/O Device - Build-A-PC Challenge: - Test: Built PC for gaming purpose - Components Chosen: - CPU: Intel Core i5 6-core ($150) - RAM: 16 GB DDR4 ($150) - Storage: 1 TB SSD ($250) - GPU: High-end graphics card ($400) - Cooling: Enhanced air cooling ($100) - NIC and other upgrades as needed - Reasoning: Gaming requires fast CPU and high-performance GPU to handle games smoothly. 16 GB RAM and 1 TB SSD provide enough speed and storage for games. Cooling was selected to prevent overheating during extended gaming sessions. Also I chose the top end GPU over the CPU since GPU's are usually more important for smoother gaming experiences.","title":"4. Testing &amp; Evaluation"},{"location":"classes/ap-networking/202509component-cards/#5-reflection-analysis","text":"I learned how hardware and software work together to perform computing tasks. The CPU acts as the brain, RAM temporarily stores data, and the GPU accelerates display and computation. Software layers allow applications to communicate with hardware through drivers and the OS. The Build-A-PC challenge helped me learn to make trade-offs to optimize for gaming, balancing cost, and performance. These lessons mirror real-world computing and network system design. By learning the basic components, we can understand how pcs function and work. If there every was a problem or a component needed to be upgraded, we could determine which one. Some next steps could include exploring cloud storage and exploring how the cli works.","title":"5. Reflection &amp; Analysis"}]}